pub mod token;

use std::{str::FromStr, sync::Arc, time::Instant};

use ethers::{
    prelude::abigen,
    providers::{Authorization, ConnectionDetails, Http, Provider, RawCall, Ws},
    types::{spoof, Address, Bytes, U256},
    utils::parse_units,
};
use eyre::Result;
use futures::{stream::FuturesUnordered, StreamExt};
use lazy_static::lazy_static;
use structopt::StructOpt;
use token::{get_tokens, Token};
use url::Url;

lazy_static! {
    static ref UNISWAP_ROUTER_V2: String =
        String::from("0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D");
}

#[derive(StructOpt)]
pub struct Cli {
    // Number of iterations
    #[structopt(long = "outer")]
    outer: i128,
    // No of websocket requests per iteration
    #[structopt(long = "iterations")]
    inner: i128,
}

abigen!(
    TOKENCHECKER,
    "src/TokenChecker.abi",
    event_derives(serde::Deserialize, serde::Serialize)
);

#[tokio::main]
async fn main() {
    dotenv::dotenv().ok();
    let args = Cli::from_args();
    //eth_call with a stateOverride
    println!("Running benchmark app");
    start_benchmark(args).await;
}

async fn start_benchmark(args: Cli) {
    let ws_provider = get_ws_provider().await;
    let tokens = get_tokens().await.unwrap();
    let mut futures = (0..args.outer)
        .map(|i| {
            tokio::spawn(batch_calls(
                i,
                ws_provider.clone(),
                args.inner,
                tokens.clone(),
            ))
        })
        .collect::<FuturesUnordered<_>>();

    while let Some(_) = futures.next().await {}
}

async fn batch_calls(
    index: i128,
    ws_provider: Arc<Provider<Ws>>,
    iterations: i128,
    tokens: Vec<Token>,
) {
    let t = Instant::now();
    let mut futures = (0..iterations)
        .map(|i| {
            let ws_provider = ws_provider.clone();
            let token_index = i % tokens.len() as i128;
            tokio::spawn(make_eth_call_with_state_override(
                tokens
                    .get(token_index as usize)
                    .unwrap()
                    .address
                    .parse::<Address>()
                    .unwrap(),
                ws_provider,
            ))
        })
        .collect::<FuturesUnordered<_>>();
    while let Some(_val) = futures.next().await {}
    println!("------ BENCHMARK  ------");
    println!("Iteration index: {}", index);
    println!("Requests done this iteration : {}", iterations);
    println!("Total time taken: {:?}", t.elapsed());
}

async fn make_eth_call_with_state_override(
    token: Address,
    ws_provider: Arc<Provider<Ws>>,
) -> Result<()> {
    let initial_eth_balance: U256 = parse_units(1, 18).unwrap().into();
    let token_checker_address = "0x0000000000000000000000000000000000000124"
        .parse::<Address>()
        .unwrap();
    let token_checker_contract = TOKENCHECKER::new(token_checker_address, ws_provider.clone());
    let transaction = token_checker_contract.check_token(
        UNISWAP_ROUTER_V2.parse::<Address>().unwrap(),
        token,
        0,
        initial_eth_balance * 6 / 1000,
        0,
    );
    // Contract sourcecode in contracts/TokenChecks.sol
    let token_checker_deployed_bytecode = "0x60806040526004361061001d575f3560e01c8063c3db735b1461001f575b005b34801561002a575f80fd5b5061003e610039366004611067565b610052565b604051901515815260200160405180910390f35b5f80826001811115610066576100666110d5565b0361015f5762ffffff8416156100c35760405162461bcd60e51b815260206004820152601e60248201527f563220706f6f6c206d757374206861766520666565207365742061732030000060448201526064015b60405180910390fd5b5f8690505f9150806001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610106573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061012a91906110e9565b6001600160a01b0316866001600160a01b03160361014b5760019150610159565b61015687878661021a565b91505b50610211565b6001826001811115610173576101736110d5565b03610211575f8690505f9150806001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101df91906110e9565b6001600160a01b0316866001600160a01b031603610200576001915061020f565b61020c87878787610706565b91505b505b95945050505050565b6040805160028082526060820183525f928692849290916020830190803683370190505090506060826001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102a291906110e9565b825f815181106102b4576102b461111f565b60200260200101906001600160a01b031690816001600160a01b03168152505085826001815181106102e8576102e861111f565b60200260200101906001600160a01b031690816001600160a01b0316815250505f8690505f47905061037a856001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061037391906110e9565b8286610ad4565b92505f836001855161038c9190611147565b8151811061039c5761039c61111f565b60209081029190910101516040516370a0823160e01b81523060048201529091505f906001600160a01b038516906370a0823190602401602060405180830381865afa1580156103ee573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104129190611160565b9050866001600160a01b031663fb3bdb4184848930426040518663ffffffff1660e01b815260040161044794939291906111b9565b5f6040518083038185885af1158015610462573d5f803e3d5ffd5b50505050506040513d5f823e601f3d908101601f1916820160405261048a91908101906111ed565b506040516370a0823160e01b81523060048201525f9082906001600160a01b038716906370a0823190602401602060405180830381865afa1580156104d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104f59190611160565b6104ff9190611147565b90505f81116105435760405162461bcd60e51b815260206004820152601060248201526f21b0b713ba1039b2b636103a3434b99760811b60448201526064016100ba565b6040805160028082526060820183525f926020830190803683370190505090508b815f815181106105765761057661111f565b60200260200101906001600160a01b031690816001600160a01b031681525050886001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105f691906110e9565b816001815181106106095761060961111f565b6001600160a01b03928316602091820292909201015260405163095ea7b360e01b81528e8216600482015260248101849052479188169063095ea7b3906044015f604051808303815f87803b158015610660575f80fd5b505af1158015610672573d5f803e3d5ffd5b505060405163791ac94760e01b81526001600160a01b038d16925063791ac94791506106aa9086905f908790309042906004016112a6565b5f604051808303815f87803b1580156106c1575f80fd5b505af11580156106d3573d5f803e3d5ffd5b505050505f81476106e49190611147565b90508c6106f18289611147565b11159f9e505050505050505050505050505050565b604080516101008101825273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28082526001600160a01b038616602083015262ffffff8516928201929092523060608201525f91869186904790859060808101610765426104b06112e1565b8152602081018490525f6040808301829052606090920181905290516370a0823160e01b8152306004820152919250906001600160a01b038516906370a0823190602401602060405180830381865afa1580156107c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107e89190611160565b9050856001600160a01b031663414bf38984846040518363ffffffff1660e01b815260040161081791906112f4565b60206040518083038185885af1158015610833573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906108589190611160565b506040516370a0823160e01b81523060048201525f9082906001600160a01b038716906370a0823190602401602060405180830381865afa15801561089f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108c39190611160565b6108cd9190611147565b90505f81116109105760405162461bcd60e51b815260206004820152600f60248201526e43616e27742073656c6c207468697360881b60448201526064016100ba565b60405163095ea7b360e01b81526001600160a01b0388811660048301526024820183905247919087169063095ea7b3906044015f604051808303815f87803b15801561095a575f80fd5b505af115801561096c573d5f803e3d5ffd5b50505050604051806101000160405280876001600160a01b03168152602001886001600160a01b031681526020018c62ffffff168152602001306001600160a01b03168152602001426104b06109c291906112e1565b8152602081018490525f60408083018290526060909201525163414bf38960e01b81529094506001600160a01b0389169063414bf38990610a079087906004016112f4565b6020604051808303815f875af1158015610a23573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a479190611160565b506040516370a0823160e01b81523060048201525f906001600160a01b038916906370a0823190602401602060405180830381865afa158015610a8c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab09190611160565b610aba90476112e1565b90505f610ac78383611147565b90508b6106f18289611147565b6060600282511015610b285760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016100ba565b815167ffffffffffffffff811115610b4257610b4261110b565b604051908082528060200260200182016040528015610b6b578160200160208202803683370190505b50905082815f81518110610b8157610b8161111f565b6020026020010181815250505f5b60018351610b9d9190611147565b811015610c54575f80610bef87868581518110610bbc57610bbc61111f565b602002602001015187866001610bd291906112e1565b81518110610be257610be261111f565b6020026020010151610c5c565b91509150610c17848481518110610c0857610c0861111f565b60200260200101518383610d21565b84610c238560016112e1565b81518110610c3357610c3361111f565b60200260200101818152505050508080610c4c9061135d565b915050610b8f565b509392505050565b5f805f610c698585610e3b565b5090505f80610c79888888610f31565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610cb4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cd89190611390565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614610d0f578082610d12565b81815b90999098509650505050505050565b5f808411610d855760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b60648201526084016100ba565b5f83118015610d9357505f82115b610df05760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b60648201526084016100ba565b5f610dfd856103e56113dc565b90505f610e0a84836113dc565b90505f82610e1a876103e86113dc565b610e2491906112e1565b9050610e3081836113f3565b979650505050505050565b5f80826001600160a01b0316846001600160a01b031603610eac5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016100ba565b826001600160a01b0316846001600160a01b031610610ecc578284610ecf565b83835b90925090506001600160a01b038216610f2a5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016100ba565b9250929050565b60408051808201825260208082527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f8183015282518084019093528083527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303908301525f9160606001600160a01b038716735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f03610fc3575081610fc6565b50805b5f80610fd28888610e3b565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091508990604801604051602081830303815290604052805190602001208460405160200161102b93929190611412565b60408051601f1981840301815291905280516020909101209998505050505050505050565b6001600160a01b0381168114611064575f80fd5b50565b5f805f805f60a0868803121561107b575f80fd5b853561108681611050565b9450602086013561109681611050565b9350604086013562ffffff811681146110ad575f80fd5b9250606086013591506080860135600281106110c7575f80fd5b809150509295509295909350565b634e487b7160e01b5f52602160045260245ffd5b5f602082840312156110f9575f80fd5b815161110481611050565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561115a5761115a611133565b92915050565b5f60208284031215611170575f80fd5b5051919050565b5f8151808452602080850194508084015f5b838110156111ae5781516001600160a01b031687529582019590820190600101611189565b509495945050505050565b848152608060208201525f6111d16080830186611177565b6001600160a01b03949094166040830152506060015292915050565b5f60208083850312156111fe575f80fd5b825167ffffffffffffffff80821115611215575f80fd5b818501915085601f830112611228575f80fd5b81518181111561123a5761123a61110b565b8060051b604051601f19603f8301168101818110858211171561125f5761125f61110b565b60405291825284820192508381018501918883111561127c575f80fd5b938501935b8285101561129a57845184529385019392850192611281565b98975050505050505050565b85815284602082015260a060408201525f6112c460a0830186611177565b6001600160a01b0394909416606083015250608001529392505050565b8082018082111561115a5761115a611133565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b5f6001820161136e5761136e611133565b5060010190565b80516001600160701b038116811461138b575f80fd5b919050565b5f805f606084860312156113a2575f80fd5b6113ab84611375565b92506113b960208501611375565b9150604084015163ffffffff811681146113d1575f80fd5b809150509250925092565b808202811582820484141761115a5761115a611133565b5f8261140d57634e487b7160e01b5f52601260045260245ffd5b500490565b60ff60f81b81526bffffffffffffffffffffffff198460601b1660018201528260158201525f82515f5b81811015611459576020818601810151603586840101520161143c565b505f920160350191825250939250505056fea2646970667358221220deceee7e2ff097512208f9f82cc183953be7fdcb6d18b050896acdf7a9e8c40e64736f6c63430008140033";

    let mut state = spoof::state();
    state
        .account(token_checker_address)
        .code(Bytes::from_str(token_checker_deployed_bytecode).unwrap())
        .balance(initial_eth_balance);
    let _res = ws_provider.call_raw(&transaction.tx).state(&state).await?;
    Ok(())
}

fn get_provider() -> Arc<Provider<Http>> {
    let mainnet_rpc = std::env::var("MAINNET_RPC").expect("MAINNET_RPC to be in the .env file");
    Arc::new(Provider::try_from(mainnet_rpc).unwrap())
}

async fn get_ws_provider() -> Arc<Provider<Ws>> {
    let mainnet_ws = std::env::var("MAINNET_WS").expect("MAINNET_WS must be in .env file");
    let url = Url::parse(&mainnet_ws).unwrap();
    let username = url.username();
    let password = url.password().unwrap_or(""); // will be None if not present
    let url_without_auth = Url::parse(&format!(
        "{}://{}{}",
        url.scheme(),
        url.host().unwrap(),
        match url.port() {
            Some(port) => format!("{}:{}", url.path().replace('/', ""), port),
            None => url.path().to_string(),
        }
    ))
    .unwrap();
    let auth = Authorization::basic(username, password);
    let opts = ConnectionDetails::new(url_without_auth, Some(auth));
    Arc::new(Provider::<Ws>::connect(opts).await.unwrap())
}

#[cfg(test)]
mod test {
    use crate::{start_benchmark, Cli};

    #[tokio::test]
    async fn test_benchmark() {
        dotenv::dotenv().ok();
        let test_cases = vec![
            Cli {
                outer: 1,
                inner: 100,
            },
            Cli {
                outer: 2,
                inner: 100,
            },
            Cli {
                outer: 3,
                inner: 100,
            },
            Cli {
                outer: 1,
                inner: 1000,
            },
            Cli {
                outer: 2,
                inner: 1000,
            },
            Cli {
                outer: 3,
                inner: 1000,
            },
            Cli {
                outer: 1,
                inner: 10000,
            },
            Cli {
                outer: 2,
                inner: 10000,
            },
            Cli {
                outer: 3,
                inner: 10000,
            },
        ];
        for test_case in test_cases {
            println!(
                "\n----- TEST CASE: Total Iterations {}, Requests per Iteration {}-----",
                test_case.outer, test_case.inner
            );
            start_benchmark(test_case).await;
        }
    }
}
